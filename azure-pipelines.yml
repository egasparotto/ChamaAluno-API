# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'GaspaTech'
  imageRepository: 'chamaalunoapi'
  containerRegistry: 'GaspaTech.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  Package.ProjectName: 'ChamaAluno-API'
  Package.Name: 'ChamaAluno-API'
  Package.MajorVersion: '1.0'
  Package.Space: 'Spaces-1'
  Package.ChannelName: '$(Build.SourceBranchName)' 

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
- stage: Octopus
  displayName: Octopus
  jobs:
    - job: Octopus
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: OctoInstaller@4
        inputs:
          version: '6.17.3'
            
      - task: OctopusPack@4
        inputs:
          PackageId: '$(Package.Name).$(Build.SourceBranchName)'
          PackageFormat: 'NuPkg'
          PackageVersion: '$(Package.MajorVersion).$(Build.BuildID)'
          SourcePath: '$(Build.Repository.LocalPath)'
          OutputPath: '$(build.artifactstagingdirectory)/package'
        
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)/package'
          ArtifactName: 'package'
        condition: succeededOrFailed()

      - task: OctopusPush@3
        inputs:
          OctoConnectedServiceName: 'Octopus'
          Space: '$(Package.Space)'
          Package: '$(Build.ArtifactStagingDirectory)/package/$(Package.Name).$(Build.SourceBranchName).$(Package.MajorVersion).$(Build.BuildID).nupkg'
          Replace: true

      - task: OctoInstaller@4
        displayName: 'Define Vers√£o do Octopus'
        inputs:
          version: '6.17.3'

      - task: CmdLine@2
        displayName: 'Create a Channel in Octopus'
        inputs:
          script: '/usr/bin/dotnet /opt/hostedtoolcache/octo/6.17.3/x64/Octo.dll  create-channel --project $(Package.ProjectName) --channel $(Package.ChannelName) --server $(Octopus.Server) --apikey $(Octopus.apikey)  --update-existing'

      - task: OctopusCreateRelease@4
        displayName: 'Create a Release in Octopus'
        inputs:
          OctoConnectedServiceName: 'Octopus'
          Space: '$(Package.Space)'
          ProjectName: '$(Package.ProjectName)'
          ReleaseNumber: '$(Package.MajorVersion).$(Build.BuildID)'
          Channel: '$(Package.ChannelName)'
          ChangesetCommentReleaseNotes: true
          WorkItemReleaseNotes: true